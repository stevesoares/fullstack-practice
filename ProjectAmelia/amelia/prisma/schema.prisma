// Prisma schema for Project Amelia
// Default to SQLite locally; can switch to Postgres (Supabase) by changing the provider and DATABASE_URL

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider      = "prisma-erd-generator"
  output        = "../public/schema.png"
  layout        = "dot"
  theme         = "light"
  // 
}

datasource db {
  provider = "sqlite" // Switch to "postgresql" for Supabase in production
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  companyName   String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  address       String?
  addressStreet String?
  addressCity   String?
  addressState  String?
  addressPostalCode String?
  passwordHash  String?
  plan          String    @default("starter")
  billingEmail  String?
  billingAddress String?

  // Auth
  accounts Account[]
  sessions Session[]

  // App domain
  leads       Lead[]
  contracts   Contract[]
  invoices    Invoice[]
  galleries   Gallery[]
  notes       Note[]
  contacts    Contact[]
  projects    Project[]
  events      CalendarEvent[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum LeadStatus {
  LEAD
  QUALIFIED
  BOOKED
}

model Lead {
  id          String     @id @default(cuid())
  ownerId     String
  owner       User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  clientName  String
  clientEmail String
  source      String?
  status      LeadStatus @default(LEAD)
  budgetUsd   Int?
  eventDate   DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  contracts Contract[]
  invoices  Invoice[]
  notes     Note[]
  galleries Gallery[]
}

model Contract {
  id            String   @id @default(cuid())
  ownerId       String
  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leadId        String?
  lead          Lead?    @relation(fields: [leadId], references: [id])
  title         String
  pdfUrl        String?
  s3Key         String?
  status        String   @default("draft") // draft | sent | signed
  signerName    String?
  signerEmail   String?
  signedAt      DateTime?
  signToken     String?  @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  invoices Invoice[]
}

model Invoice {
  id              String    @id @default(cuid())
  ownerId         String
  owner           User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leadId          String?
  lead            Lead?     @relation(fields: [leadId], references: [id])
  contractId      String?
  contract        Contract? @relation(fields: [contractId], references: [id])
  amountUsd       Int
  currency        String    @default("USD")
  dueDate         DateTime
  status          String    @default("draft") // draft | open | paid | void
  stripeSessionId String?
  stripeInvoiceId String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  payments        Payment[]
}

model Payment {
  id         String   @id @default(cuid())
  invoiceId  String
  invoice    Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  amountUsd  Int
  stripeId   String?
  createdAt  DateTime @default(now())
}

model Gallery {
  id        String     @id @default(cuid())
  ownerId   String
  owner     User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leadId    String?
  lead      Lead?      @relation(fields: [leadId], references: [id])
  title     String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     MediaItem[]

  @@index([leadId])
}

model MediaItem {
  id         String   @id @default(cuid())
  galleryId  String
  gallery    Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  filename   String
  s3Key      String
  mimeType   String
  sizeBytes  Int      @default(0)
  createdAt  DateTime @default(now())
}

model Note {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  leadId    String?
  lead      Lead?    @relation(fields: [leadId], references: [id])
  content   String
  createdAt DateTime @default(now())
}

model Contact {
  id        String   @id @default(cuid())
  ownerId   String
  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  firstName String
  lastName  String
  email     String?
  phone     String?
  company   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects  Project[]
}

model Project {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  contactId   String?
  contact     Contact? @relation(fields: [contactId], references: [id])
  title       String
  eventDate   DateTime?
  status      String   @default("draft")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  events     CalendarEvent[]
}

model CalendarEvent {
  id          String   @id @default(cuid())
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  title       String
  description String?
  location    String?
  startsAt    DateTime
  endsAt      DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


